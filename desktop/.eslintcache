[{"/Users/think/Github/projects/cxapp/desktop/src/context/TimerContext.js":"1","/Users/think/Github/projects/cxapp/desktop/src/components/CardTask.js":"2","/Users/think/Github/projects/cxapp/desktop/src/components/CardDocument.js":"3","/Users/think/Github/projects/cxapp/desktop/src/components/Textarea.js":"4","/Users/think/Github/projects/cxapp/desktop/src/components/CardDescription.js":"5","/Users/think/Github/projects/cxapp/desktop/src/utils/helpers.js":"6","/Users/think/Github/projects/cxapp/desktop/src/App.js":"7","/Users/think/Github/projects/cxapp/desktop/src/components/Login.js":"8","/Users/think/Github/projects/cxapp/desktop/src/components/index.js":"9","/Users/think/Github/projects/cxapp/desktop/src/components/Task.js":"10","/Users/think/Github/projects/cxapp/desktop/src/components/Project.js":"11","/Users/think/Github/projects/cxapp/desktop/src/components/Dashboard.js":"12","/Users/think/Github/projects/cxapp/desktop/src/components/CardMessageSend.js":"13","/Users/think/Github/projects/cxapp/desktop/src/components/FooterModal.js":"14","/Users/think/Github/projects/cxapp/desktop/src/components/CardSubTask.js":"15","/Users/think/Github/projects/cxapp/desktop/src/components/Timer.js":"16","/Users/think/Github/projects/cxapp/desktop/src/context/AppContext.js":"17","/Users/think/Github/projects/cxapp/desktop/src/components/CardProject.js":"18","/Users/think/Github/projects/cxapp/desktop/src/components/Header.js":"19","/Users/think/Github/projects/cxapp/desktop/src/components/CardMessage.js":"20","/Users/think/Github/projects/cxapp/desktop/src/components/TaskList.js":"21","/Users/think/Github/projects/cxapp/desktop/src/components/Documents.js":"22","/Users/think/Github/projects/cxapp/desktop/src/components/Footer.js":"23","/Users/think/Github/projects/cxapp/desktop/src/components/Logout.js":"24","/Users/think/Github/projects/cxapp/desktop/src/pages/Settings.js":"25","/Users/think/Github/projects/cxapp/desktop/src/components/ModalMessage.js":"26","/Users/think/Github/projects/cxapp/desktop/src/context/AuthContext.js":"27","/Users/think/Github/projects/cxapp/desktop/src/api/Task.js":"28","/Users/think/Github/projects/cxapp/desktop/src/components/Dropdown.js":"29","/Users/think/Github/projects/cxapp/desktop/src/index.js":"30","/Users/think/Github/projects/cxapp/desktop/src/components/ClientList.js":"31","/Users/think/Github/projects/cxapp/desktop/src/components/Account.js":"32","/Users/think/Github/projects/cxapp/desktop/src/components/TimerList.js":"33"},{"size":1541,"mtime":1608325986995,"results":"34","hashOfConfig":"35"},{"size":1806,"mtime":1608050551921,"results":"36","hashOfConfig":"35"},{"size":846,"mtime":1607725088584,"results":"37","hashOfConfig":"35"},{"size":618,"mtime":1607614496400,"results":"38","hashOfConfig":"35"},{"size":661,"mtime":1607614496393,"results":"39","hashOfConfig":"35"},{"size":629,"mtime":1607614496407,"results":"40","hashOfConfig":"35"},{"size":1474,"mtime":1608329995556,"results":"41","hashOfConfig":"35"},{"size":5116,"mtime":1608326676999,"results":"42","hashOfConfig":"35"},{"size":1246,"mtime":1608214732977,"results":"43","hashOfConfig":"35"},{"size":15939,"mtime":1608327579692,"results":"44","hashOfConfig":"35"},{"size":8772,"mtime":1608328034970,"results":"45","hashOfConfig":"35"},{"size":5088,"mtime":1608337135824,"results":"46","hashOfConfig":"35"},{"size":798,"mtime":1607722252031,"results":"47","hashOfConfig":"35"},{"size":724,"mtime":1608195299672,"results":"48","hashOfConfig":"35"},{"size":1378,"mtime":1607949593073,"results":"49","hashOfConfig":"35"},{"size":3474,"mtime":1608333356862,"results":"50","hashOfConfig":"35"},{"size":533,"mtime":1607693699410,"results":"51","hashOfConfig":"35"},{"size":1143,"mtime":1608205332619,"results":"52","hashOfConfig":"35"},{"size":1235,"mtime":1608322752021,"results":"53","hashOfConfig":"35"},{"size":832,"mtime":1608223124713,"results":"54","hashOfConfig":"35"},{"size":1883,"mtime":1608318036485,"results":"55","hashOfConfig":"35"},{"size":1743,"mtime":1608327352362,"results":"56","hashOfConfig":"35"},{"size":158,"mtime":1608197361797,"results":"57","hashOfConfig":"35"},{"size":1004,"mtime":1608326657991,"results":"58","hashOfConfig":"35"},{"size":2233,"mtime":1608113561810,"results":"59","hashOfConfig":"35"},{"size":850,"mtime":1607959146270,"results":"60","hashOfConfig":"35"},{"size":429,"mtime":1607279663956,"results":"61","hashOfConfig":"35"},{"size":1232,"mtime":1608032073170,"results":"62","hashOfConfig":"35"},{"size":735,"mtime":1608040007173,"results":"63","hashOfConfig":"35"},{"size":959,"mtime":1608213986325,"results":"64","hashOfConfig":"35"},{"size":5726,"mtime":1608326765615,"results":"65","hashOfConfig":"35"},{"size":2609,"mtime":1608229332962,"results":"66","hashOfConfig":"35"},{"size":5358,"mtime":1608326433114,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7exexi",{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"90","messages":"91","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"73"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"99"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"99"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"136","messages":"137","errorCount":9,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"77"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/think/Github/projects/cxapp/desktop/src/context/TimerContext.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/CardTask.js",["151"],"import { useContext } from 'react';\n\nimport { AppContext } from '../context/AppContext';\nimport { TimerContext } from '../context/TimerContext';\n\nconst CardTask = ( { data }) => {\n\n  const app = useContext(AppContext);\n  const timer = useContext(TimerContext);\n\n  const onDragStart = (e) => {\n    e.dataTransfer.setData(\"text/plain\", data.id);\n    // e.dataTransfer.setData(\"text/plain\",JSON.stringify(data));\n  }\n\n  const onDragEnd = (e) => {\n    // e.dataTransfer.clearData();\n  }\n\n  return (\n\n      <a \n        data-task \n        data-id={data.id}\n        onClick={() => app.setTask(data.id)}\n        onDragStart={(e) => onDragStart(e)}\n        onDragEnd={(e) => onDragEnd(e, data.id)}\n        draggable=\"true\"\n      >\n\n      {timer.time.id === data.id && !timer.pause &&\n\n        <svg viewBox=\"0 0 100 100\" className=\"ic-svg svg--brand s8\"> \n          <use xlinkHref=\"/assets/sprite.svg#timer-indicator\"></use>\n        </svg>\n\n        }\n\n        <div \n          \n          className=\"card-text-wrapper\"\n        >\n          <div className=\"card-title-wrapper\">\n\n            <div className=\"inner-wrapper\">\n\n             <h2>{data.name}</h2>\n\n            </div>\n\n            <div className=\"inner-wrapper\">\n\n              {data.is_review === '1' &&\n                <svg viewBox=\"0 0 100 100\" className=\"ic-svg svg--brand s16\"> \n                  <use xlinkHref=\"/assets/sprite.svg#review\"></use>\n                </svg>\n              }\n\n              {data.unread_message_count === 0 &&\n                <span className=\"count\">{data.tasks_count}</span>\n              }\n\n              {data.subtask_count === 0 &&\n                <span className=\"count\">{data.tasks_count}</span>\n              }\n\n            </div>\n            \n          </div>\n\n        </div>\n\n      </a>\n\n  )\n}\n\nexport default CardTask\n",["152","153"],"/Users/think/Github/projects/cxapp/desktop/src/components/CardDocument.js",["154"],"import {useContext} from \"react\";\n\nimport { AppContext } from '../context/AppContext';\n\nconst CardDocument = ( { data }) => {\n\nconst app = useContext(AppContext);\n\n  return (\n\n    <a data-document data-id={data.id}>\n\n    { (data.type === 'image/jpeg' || data.type === 'image/png')\n\n    ? <div className=\"card-document\">\n        <div className=\"image\" style={{backgroundImage: `url(${app.api}/${data.path}${data.name})`}} />\n        <div className=\"description\">\n          <span className=\"label\">{data.name}</span>\n        </div>\n      </div>\n\n    : <div className=\"card-document\">\n        <div className=\"document\">\n          <span className=\"icon\">D</span>\n        </div>\n        <div className=\"description\">\n          <span className=\"label\">{data.name}</span>\n        </div>\n      </div>\n    }\n\n\n    </a>\n\n  )\n}\n\nexport default CardDocument\n",["155","156"],"/Users/think/Github/projects/cxapp/desktop/src/components/Textarea.js",[],["157","158"],"/Users/think/Github/projects/cxapp/desktop/src/components/CardDescription.js",[],["159","160"],"/Users/think/Github/projects/cxapp/desktop/src/utils/helpers.js",[],"/Users/think/Github/projects/cxapp/desktop/src/App.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/Login.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/index.js",["161"],"export { default as Login } from './Login';\nexport { default as Logout } from './Logout';\nexport { default as Dashboard } from './Dashboard';\nexport { default as Project } from './Project';\nexport { default as Task } from './Task';\nexport { default as TaskList } from './TaskList';\nexport { default as Documents } from './Documents';\nexport { default as Header } from './Header';\nexport { default as Footer } from './Footer';\nexport { default as Timer } from './Timer';\n\nexport { default as CardMessage } from './CardMessage';\nexport { default as CardMessageSend } from './CardMessageSend';\nexport { default as CardDocument } from './CardDocument';\nexport { default as CardProject } from './CardProject';\nexport { default as CardTask } from './CardTask';\nexport { default as CardSubTask } from './CardSubTask';\nexport { default as CardDescription } from './CardDescription';\n\nexport { default as FooterModal } from './FooterModal';\nexport { default as ModalMessage } from './ModalMessage';\nexport { default as Dropdown } from './Dropdown';\nexport { default as Textarea } from './Textarea';\n\nexport { default as ClientList } from './ClientList';\nexport { default as ClientList } from './TimerList';\nexport { default as Account } from './Account';\n","/Users/think/Github/projects/cxapp/desktop/src/components/Task.js",["162","163","164","165","166","167","168","169"],"import {useEffect, useState, useRef, useContext} from \"react\";\n\nimport { AuthContext } from '../context/AuthContext';\nimport { AppContext } from '../context/AppContext';\nimport { TimerContext } from '../context/TimerContext';\n\nimport { taskTotalTime } from '../utils/helpers';\n\nimport { Header, CardSubTask, CardMessage, Documents, Textarea, CardMessageSend, FooterModal, Footer, ModalMessage, Dropdown, TimerList } from '../components';\n\n// console.log(Notification);\n\n// const { Menu, MenuItem, Notification } = window.remote;\n\nconst { Menu, MenuItem } = window.remote;\n\nconst Task = () => {\n\n  const abortController = new AbortController();\n\n  const auth = useContext(AuthContext);\n  const app = useContext(AppContext);\n  const timer = useContext(TimerContext);\n\n  const token = auth.token;\n\n\n  const [task, setTask] = useState([]);\n  const [taskStatus, setTaskStatus] = useState();\n  const [messages, setMessages] = useState([]);\n  const [subTasks, setSubTasks] = useState([]);\n  const [documents, setDocuments] = useState([]);\n  const [modalMessage, setModalMessage] = useState(false);\n  const [modalMessageCallback, setModalStateCallback] = useState(null);\n  const [messageRead, setMessageRead] = useState(0);\n  const [isReview, setIsReview] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [modalState, setModalState] = useState(false);\n  const [dropdownState, setDropdownState] = useState(false);\n\n\n  const messagesRef = useRef(messages);\n  messagesRef.current = messages;\n\n  const subTasksRef = useRef(subTasks);\n  subTasksRef.current = subTasks;\n\n  const documentsRef = useRef(documents);\n  documentsRef.current = documents;\n\n  console.log(task);\n  \n  const _getTask = () => {\n    if(!token) return;\n    fetch(`${app.api}/api/tasks/${app.task}`, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      signal: abortController.signal\n    })\n    .then((response) => response.json())\n    .then((json) => {\n      setTask(json)\n      setDocuments(json.document)\n      setTaskStatus(json.status)\n    })\n    .catch((error) => console.error(error))\n    .finally(() => setLoading(false))\n  }\n\n  const _getMessages = (status) => {\n    if(!token) return;\n    fetch(`${app.api}/api/messages/${app.task}/${status}`, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },      \n      signal: abortController.signal\n    })\n    .then((response) => response.json())\n    .then((json) => setMessages(json))\n    .catch((error) => console.error(error))\n    .finally(() => setLoading(false))\n  }\n\n  const _getSubTasks = (taskId) => {\n    if(!token) return;\n    fetch(`${app.api}/api/subtasks/${app.task}`, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      signal: abortController.signal\n    })\n    .then((response) => response.json())\n    .then((json) => setSubTasks(json))\n    .catch((error) => console.error(error))\n    .finally(() => setLoading(false))\n  }\n\n  const _createMessage = ( data ) => {\n    if(!token) return;\n    fetch(`${app.api}/api/messages`, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      body: JSON.stringify({\n        message: data,\n        task: app.task\n      }),\n      signal: abortController.signal\n    })\n    .then((response) =>  _getMessages(messageRead))\n    .catch((error) => console.error(error))\n    .finally(() => setLoading(false))\n  }\n\n\n  const _deleteMessage = ( id ) => {\n    if(!token) return;\n    fetch(`${app.api}/api/messages/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      signal: abortController.signal,\n    })\n    .catch((error) => console.error(error))\n  }\n\n  const _updateTask = () => {\n    if(!token) return;\n    fetch(`${app.api}/api/tasks/${app.task}`, {\n      method: \"PATCH\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      body: JSON.stringify({task}),\n      signal: abortController.signal,\n    })\n    .then((response) => response.json())\n    .catch((error) => console.error(error))\n    .finally(() => setLoading(false))\n  }\n\n  const _updateSubTask = (subtask) => {\n    if(!token) return;\n    fetch(`${app.api}/api/subtasks/${subtask.id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      body: JSON.stringify({subtask}),\n      signal: abortController.signal,\n    })\n    .catch((error) => console.error(error))\n  }\n\n\n  const _createSubTask = (selection) => {\n    if(!token) return;\n    fetch(`${app.api}/api/subtasks/${app.task}`, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      body: JSON.stringify({name: selection}),\n      signal: abortController.signal,\n    })\n    .then((json) => _getSubTasks())\n    .catch((error) => console.error(error))\n    .finally(() => setModalState(false))\n  }\n\n\n  const _deleteSubTask = (subTaskId) => {\n    if(!token) return;\n    fetch(`${app.api}/api/subtasks/${subTaskId}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token\n      },\n      signal: abortController.signal,\n    })\n    .catch((error) => console.error(error))\n  }\n\n\n  const _deleteDocument = (id) => {\n    if(!token) return;\n    fetch(`${app.api}/api/documents/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token\n      },\n      signal: abortController.signal,\n    })\n    .then((response) => _getTask())\n    .catch((error) => console.error(error))\n  }\n\n  const updateName = (data) => {\n    if(task.name !== data) {\n      task.name = data;\n      _updateTask()\n    }\n  }\n\n\n  const _storeDocuments = (documents) => {\n    if(!token) return;\n    const formData = new FormData();\n\n    for (var i = 0; i < documents.length; i++) {\n      formData.append('documents[]', documents[i], documents[i].name);\n    }\n\n    formData.append('authorization', token);\n    formData.append('_method', 'put');\n\n    fetch(`${app.api}/api/documents/${app.task}`, {\n      method: \"POST\",\n      body: formData\n    })\n    .then((response) => _getTask())\n    .catch((error) => console.error(error))\n    .finally(() => setModalState(false))\n  }\n\n  \n  const updateDescription = (data) => {\n    if(task.description !== data) {\n      task.description = data;\n      _updateTask()\n    }\n  }\n\n  const updateSubTask = (id, data) => {\n\n    let item = subTasks.filter(item => item.id === id)[0];\n\n    if (typeof data === \"boolean\"){\n      (data)\n      ? item.status = '0'\n      : item.status = '1';\n      _updateSubTask(item)\n    }\n\n    if (typeof data === \"string\"){\n      if(item.name !== data) {\n        item.name = data;\n        _updateSubTask(item)\n      }\n    }\n  }\n\n  const removeSubTask = (id) => {\n    // setModalMessage('Will be delete in 5s');\n    _deleteSubTask(id)\n    const filteredSubTasks = subTasksRef.current.filter(item => item.id !== parseInt(id))\n    setSubTasks(filteredSubTasks)\n  }\n\n  const storeMessage = ( data ) => {\n    _createMessage(data)\n  }\n\n  const removeMessage = (id) => {\n    _deleteMessage(id)\n\n    const filteredMessages = messagesRef.current.filter(item => item.id !== parseInt(id))\n    setMessages(filteredMessages)\n  }\n\n  const removeDocument = (id) => {\n    _deleteDocument(id)\n  \n    const filteredDocuments = documentsRef.current.filter(item => item.id !== parseInt(id))\n    setDocuments(filteredDocuments)\n  }\n\n  const updateTasks = () => {\n    _getTask()\n  }\n\n  const updateReview = () => {\n    setIsReview(!isReview)\n    if(isReview) {\n      task.is_review = '0'\n    } else {\n      task.is_review = '1';\n    }\n    _updateTask()\n  };\n\n  const updateStatus = (status) => {\n    if(task.status !== status) {\n      task.status = status;\n      setTaskStatus(status)\n      _updateTask();\n    }\n  }\n\n\n\n  console.log('render');\n\n  const contextMenu = () => {\n    window.addEventListener('contextmenu', (e) => {\n       const menu = new Menu();\n       if (e.target.dataset.subtask) {\n         menu.append(new MenuItem({\n           label: \"Delete Subtask\",\n           click: () => {\n             removeSubTask(e.target.dataset.id)\n           }\n         }));\n       }\n       if (e.target.dataset.document) {\n         // console.log(new MenuItem());\n         menu.append(new MenuItem({\n           label: \"Delete Attachment\",\n           click: () => {\n             removeDocument(e.target.dataset.id)\n           }\n         }))\n       }\n       if (e.target.dataset.message) {\n         let selection = window.getSelection()\n         menu.append(new MenuItem({\n           label: \"Create Subtask\",\n           click: () => {\n             _createSubTask(selection.toString())\n           }\n         }));\n         menu.append(new MenuItem({\n           type: \"separator\",\n         }));\n         menu.append(new MenuItem({\n           label: \"Delete Message\",\n           click: () => {\n             removeMessage(e.target.dataset.id)\n           }\n         }));\n       }\n       menu.popup({ window: window.remote.getCurrentWindow() })\n     }, false)\n  }\n\n\n  useEffect(() => {\n    _getTask();\n    _getSubTasks();\n    contextMenu();\n\n    return () => {\n      abortController.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n  useEffect(() => {\n    _getMessages(messageRead);\n\n    return () => {\n      abortController.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messageRead]);\n\n\n  useEffect(() => {\n    task.is_review === '1' && setIsReview(true);\n  }, [task]);\n\n\n  return (\n    <>\n\n    {loading\n      ? <p></p>\n      : (\n        <>\n\n      <Header\n        back={app.setTask}\n      />\n\n      <article className=\"main container\">\n\n      <ul>\n        <li>\n          <div className=\"card-text-wrapper\">\n            <div className=\"card-title-wrapper\">\n\n            <Textarea\n              data={task.name}\n              callback={updateName}\n            />\n\n            {timer.time.id !== task.id && task.status === 'In Progress' &&\n\n              <button \n                className=\"btn btn--small\"\n                onClick={() => timer.startTimer(task.id, task.name)}\n                >\n                  <svg viewBox=\"0 0 100 100\" className=\"ic-svg s10\"> \n                    <use xlinkHref=\"/assets/sprite.svg#play\"></use>\n                  </svg>\n              </button>\n\n            }\n\n\n            {taskStatus === 'In Progress' &&\n\n            <>\n\n            <div className=\"dropdown-wrapper dropdown--left\">\n\n              <button\n                className=\"btn btn--small mr2\"\n                onClick={() => setDropdownState(!dropdownState)}\n              >\n                {taskTotalTime(task.time)}\n              </button>\n              \n              <Dropdown\n                setDropdownState={setDropdownState}\n                dropdownState={dropdownState}\n              >\n                <TimerList \n                  taskId={task.id}\n                />\n\n              </Dropdown>\n            \n            </div>\n\n\n            <span className=\"checkbox-status-container\">\n\n              <input\n                type=\"checkbox\"\n                value={task.is_review}\n                checked={isReview}\n                onChange={() => updateReview()}\n              />\n\n              <span className=\"checkmark-container\">\n                <svg viewBox=\"0 0 100 100\" className=\"ic-svg s16\"> \n                  <use xlinkHref=\"/assets/sprite.svg#review\"></use>\n                </svg>\n              </span>\n\n            </span>\n\n          </>\n\n          }\n\n          </div>\n\n          {/* <div className=\"dropdown-wrapper pt1\">\n\n           <button \n              className=\"btn btn--status\"\n              onClick={() => setDropdownStatus(!dropdownStatus)}\n              >\n              {taskStatus}\n            </button>\n\n            <Dropdown\n              setDropdownState={setDropdownStatus}\n              dropdownState={dropdownStatus}\n            >\n              <button \n                onClick={() => updateStatus('In Progress')}\n                className=\"btn btn--none\">\n                In Progress\n              </button>\n              <button \n                onClick={() => updateStatus('Completed')}\n                className=\"btn btn--none\">\n                Completed\n              </button>\n              <button \n                onClick={() => updateStatus('Not Started')}\n                className=\"btn btn--none\">\n                Not Started\n              </button>\n            </Dropdown>\n    \n            \n          </div> */}\n\n        </div>\n\n        </li>\n      </ul>\n\n\n\n      {isReview &&\n        <ul>\n          <div className=\"title-wrapper\">\n            <span className=\"label\">Requests</span>\n            {(messageRead === 0)\n              ? <button\n                  className=\"btn btn--small\"\n                  onClick={() => {setMessageRead(1)}}\n                  >\n                Show All ({task.message_count})</button>\n              : <button\n                  className=\"btn btn--small\"\n                  onClick={() => {setMessageRead(0)}}\n                  >\n                Hide</button>\n            }\n          </div>\n\n          {messages.length > 0 &&\n            messages.map((item, index) =>\n              <li\n                key={index}\n              >\n                <CardMessage\n                  key={index}\n                  data={item}\n                />\n              </li>\n            )\n          }\n          {/* <CardMessageSend\n            callback={storeMessage}\n          />  */}\n        </ul>\n      }\n\n\n      { subTasks.length > 0 &&\n        <ul>\n        <span className=\"label pb2\">Subtasks</span>\n          {subTasks.map((item, index) =>\n            <li\n              key={index}\n            >\n              <CardSubTask\n                key={index}\n                data={item}\n                callback={updateSubTask}\n              />\n            </li>\n          )}\n        </ul>\n      }\n\n\n      <ul>\n        <span className=\"label pb2\">Description</span>\n        <li\n        >\n          <Textarea\n            data={task.description}\n            callback={updateDescription}\n          />\n        </li>\n      </ul>\n\n\n      <Documents\n        data={documents}\n        callback={updateTasks}\n      />\n\n\n      </article>\n\n      {/* <ModalMessage\n        data={modalMessage}\n        callback={setModalStateCallback}\n      /> */}\n\n      <FooterModal\n        setModalState={setModalState}\n        modalState={modalState}\n      >\n          <button\n            className=\"btn btn--secondary\"\n            onClick={() => _createSubTask()}\n          >Add Subtask</button>\n          <button\n            className=\"btn btn--secondary btn--upload\">\n            <input \n              type=\"file\"  \n              onChange={(event) => _storeDocuments(event.target.files)}\n              multiple\n            />  \n          Upload Attachment</button>\n      </FooterModal>\n\n      <Footer>\n        <button\n          className=\"btn btn--icon\"\n          onClick={() => setModalState(!modalState)}>\n            <svg viewBox=\"0 0 100 100\" className=\"ic-svg s16\"> \n              <use xlinkHref=\"/assets/sprite.svg#more\"></use>\n            </svg>\n        </button>\n      </Footer>\n\n      </>\n    )}\n      </>\n    )\n  }\n\nexport default Task\n","/Users/think/Github/projects/cxapp/desktop/src/components/Project.js",["170","171","172"],"import React, {useEffect, useState, useRef, useContext} from \"react\";\n\nimport { AuthContext } from '../context/AuthContext';\nimport { AppContext } from '../context/AppContext';\nimport { Header, TaskList, CardTask, Textarea, FooterModal, ClientList, Footer, Dropdown } from '../components';\n\nconst { Menu, MenuItem } = window.remote;\n\nconst Project = () => {\n\nconst abortController = new AbortController();\n\nconst token = useContext(AuthContext).token;\nconst app = useContext(AppContext);\n\nconst [project, setProject] = useState([]);\nconst [projectClient, setProjectClient] = useState(null);\nconst [tasks, setTasks] = useState([]);\nconst [clients, setClients] = useState([]);\nconst [isSync, setIsSync] = useState(false);\nconst [loading, setLoading] = useState(true);\nconst [modalState, setModalState] = useState(false);\nconst [dropdownState, setDropdownState] = useState(false);\n\nconst tasksRef = useRef(tasks);\ntasksRef.current = tasks;\n\nconst _getTasks = () => {\n  if(!token) return;\n  setLoading(true)\n  fetch(`${app.api}/api/project/${app.project}/tasks`, {\n    method: \"GET\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    },\n    signal: abortController.signal\n  })\n  .then((response) => response.json())\n  .then((json) => {\n    setTasks(json)\n  })\n  .catch((error) => console.error(error))\n  .finally(() => setLoading(false))\n}\n\n\nconst _getProject = () => {\n  if(!token) return;\n  fetch(`${app.api}/api/projects/${app.project}`, {\n    method: \"GET\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    },\n    signal: abortController.signal\n  })\n  .then((response) => response.json())\n  .then((json) => {\n    setProject(json)\n    if(json.client !== null) {\n      setProjectClient(json.client.name)\n    }\n  })\n  .catch((error) => console.error(error))\n}\n\nconst _getClients = () => {\n  if(!token) return;\n  fetch(`${app.api}/api/clients`, {\n    method: \"GET\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    },\n    signal: abortController.signal\n  })\n  .then((response) => response.json())\n  .then((json) => {\n    setClients(json)\n  })\n  .catch((error) => console.error(error))\n}\n\nconst _updateProject = () => {\n  if(!token) return;\n  fetch(`${app.api}/api/projects/${app.project}`, {\n    method: \"PATCH\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    },\n    body: JSON.stringify({project}),\n    signal: abortController.signal\n  })\n  .then((response) => response.json())\n  .catch((error) => console.error(error))\n}\n\nconst _createTask = () => {\n  if(!token) return;\n  fetch(`${app.api}/api/tasks/${app.project}`, {\n    method: \"POST\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    },\n    signal: abortController.signal\n  })\n  .then((response) => response.json())\n  .then((json) => {\n    app.setTask(json.id)\n  })\n  .catch((error) => console.error(error))\n  .finally(() => setModalState(false))\n}\n\n\nconst _updateTask = (task) => {\n  if(!token) return;\n  fetch(`${app.api}/api/tasks/${task.id}`, {\n    method: \"PATCH\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    },\n    body: JSON.stringify({task}),\n    signal: abortController.signal\n  })\n  .catch((error) => console.error(error))\n\n}\n\nconst _deleteTask = (id) => {\n  fetch(`${app.api}/api/tasks/${id}`, {\n    method: \"delete\",\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': token,\n    }\n  })\n  .catch((error) => console.error(error))\n}\n\n\nconst contextMenu = () => {\n  window.addEventListener('contextmenu', (e) => {\n     const menu = new Menu();\n     if (e.target.dataset.task) {\n       menu.append(new MenuItem({\n         label: \"Delete Task\",\n         click: () => {\n           removeTask(e.target.dataset.id)\n         }\n       }));\n     }\n     menu.popup({ window: window.remote.getCurrentWindow() })\n   }, false)\n}\n\nconst updateProjectClient = (client) => {\n  if(project.client_id !== client.id) {\n    project.client_id = client.id;\n    setProjectClient(client.name);\n    _updateProject();\n    setDropdownState(false);\n  }\n}\n\nconst editClient = (id) => {\n  console.log(id);\n} \n\nconst updateName = (data) => {\n  if(project.name !== data) {\n    project.name = data;\n    _updateProject()\n  }\n}\n\nconst updateTaskStatus = (id, status) => {\n  let newTaskArray = [];\n  tasks.forEach((item, index) => {\n    if(item.id === parseInt(id)) {\n      item.status = status;\n      _updateTask(item);\n    }\n    newTaskArray.push(item);\n  });\n  setTasks(newTaskArray);\n}\n\n\nconst updateSync = () => {\n  setIsSync(!isSync)\n  if(isSync) {\n    project.is_sync = '0'\n  } else {\n    project.is_sync = '1';\n  }\n  _updateProject()\n};\n\nconst removeTask = (id) => {\n  _deleteTask(id)\n  console.log('blub');\n  const filteredTasks = tasksRef.current.filter(item => item.id !== parseInt(id))\n  setTasks(filteredTasks)\n}\n\n\nuseEffect(() => {\n  _getProject();\n  _getClients();\n  _getTasks();\n  contextMenu();\n\n  return () => {\n    abortController.abort();\n  };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n}, []);\n\n\nuseEffect(() => {\n  project.is_sync === '1' && setIsSync(true);\n}, [project]);\n\n\n  return (\n    <>\n\n    {loading\n      ? <p></p>\n      : (\n        <>\n\n        <Header\n          back={app.setProject}\n        />\n\n      <article className=\"main container\">\n\n        <ul>\n          <li>\n            <div className=\"project-title-wrapper\">\n\n              <svg viewBox=\"0 0 100 100\" className=\"ic-svg mr3 s16\"> \n                <use xlinkHref=\"/assets/sprite.svg#folder\"></use>\n              </svg>\n\n              <div className=\"card-text-wrapper\">\n\n                <div className=\"card-title-wrapper\">\n\n                  <Textarea\n                    data={project.name}\n                    callback={updateName}\n                  />\n\n                  <span className=\"checkbox-status-container\">\n\n                    <input\n                      type=\"checkbox\"\n                      value={project.is_sync}\n                      checked={isSync}\n                      onChange={() => updateSync()}\n                      />\n\n                    <span className=\"checkmark-container\">\n                      <svg viewBox=\"0 0 100 100\" className=\"ic-svg s16\"> \n                        <use xlinkHref=\"/assets/sprite.svg#sync\"></use>\n                      </svg>\n                    </span>\n\n                  </span>\n\n                </div>\n\n\n                <div className=\"dropdown-wrapper\">\n\n                  <button \n                    className=\"btn btn--small\"\n                    onClick={() => setDropdownState(!dropdownState)}\n                    >\n                      {(project.client !== null && project.client !== undefined)\n                        ? `${projectClient}`\n                        : 'Choose client'\n                      }\n                  </button>\n\n                  <Dropdown\n                    setDropdownState={setDropdownState}\n                    dropdownState={dropdownState}\n                  >\n                    <ClientList \n                      callback={updateProjectClient}\n                    />\n         \n                  </Dropdown>\n\n                </div>\n\n\n              </div>\n            </div>\n          </li>\n        </ul>\n\n        \n        <TaskList\n          data={tasks}\n          callback={updateTaskStatus}\n        />\n        \n\n\n      </article>\n\n      <Footer>\n        <button\n          className=\"btn btn--icon\"\n          onClick={() => setModalState(!modalState)}>\n            <svg viewBox=\"0 0 100 100\" className=\"ic-svg s16\"> \n              <use xlinkHref=\"/assets/sprite.svg#more\"></use>\n            </svg>\n        </button>\n      </Footer>\n\n\n      <FooterModal\n        setModalState={setModalState}\n        modalState={modalState}\n      >\n          <button\n            className=\"btn btn--secondary\"\n            onClick={() => _createTask()}\n          >New Task</button>\n      </FooterModal>\n\n      </>\n    )}\n      </>\n    )\n  }\n\nexport default Project\n\n\n\n// {[...new Set(tasks.map((item) => item.status))].map((cat, index) =>\n//   <ul\n//     key={index}\n//   >\n//     <span className=\"label pb2\">{cat}</span>\n//\n//     {tasks.map((item, index) => item.status === cat &&\n//         <li\n//           key={index}\n//           onClick={() => app.setTask(item.id)}\n//         >\n//           <CardTask\n//             key={index}\n//             data={item}\n//           />\n//         </li>\n//     )}\n//   </ul>\n// )}\n",["173","174"],"/Users/think/Github/projects/cxapp/desktop/src/components/Dashboard.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/CardMessageSend.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/FooterModal.js",[],["175","176"],"/Users/think/Github/projects/cxapp/desktop/src/components/CardSubTask.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/Timer.js",["177"],"/Users/think/Github/projects/cxapp/desktop/src/context/AppContext.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/CardProject.js",["178"],"import {useContext} from 'react';\n\nimport { AppContext } from '../context/AppContext';\n\nconst CardProject = ( { data }) => {\n  \n  const app = useContext(AppContext);\n\n  return (\n\n    <>\n\n      <a \n        data-project \n        data-id={data.id}\n        onClick={() => app.setProject(data.id)}\n      >\n          <svg viewBox=\"0 0 100 100\" className=\"ic-svg mr3 s16\"> \n            <use xlinkHref=\"/assets/sprite.svg#folder\"></use>\n          </svg>\n        <div className=\"card-text-wrapper\">\n\n          <div className=\"card-title-wrapper\">\n  \n            <h2>{data.name}</h2>\n            <div className=\"card-icon-wrapper\">\n              {data.is_sync === '1' &&\n                <svg viewBox=\"0 0 100 100\" className=\"ic-svg svg--brand s16\"> \n                  <use xlinkHref=\"/assets/sprite.svg#sync\"></use>\n                </svg>\n              }\n            </div>\n          </div>\n          {(data.client !== null && data.client !== undefined)\n            ? <span className=\"info\">{data.client.name}</span>\n            : <span className=\"info\">No Client</span>\n          }\n        </div>\n\n      </a>\n    </>\n\n  )\n}\n\nexport default CardProject\n","/Users/think/Github/projects/cxapp/desktop/src/components/Header.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/CardMessage.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/TaskList.js",[],["179","180"],"/Users/think/Github/projects/cxapp/desktop/src/components/Documents.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/Footer.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/Logout.js",[],"/Users/think/Github/projects/cxapp/desktop/src/pages/Settings.js",["181"],"/Users/think/Github/projects/cxapp/desktop/src/components/ModalMessage.js",["182","183"],"import { useRef, useEffect, useState } from \"react\";\n\nconst ModalMessage = ( { data, callback } ) => {\n\n  const node = useRef();\n\n  const [modalState, setModalState] = useState(false);\n  const [message, setModalMessage] = useState(null);\n\n  let timer;\n\n  useEffect(() => {\n\n    setModalState(true);\n    setModalMessage(data);\n\n\n    timer = setTimeout(() => {\n\n      setModalMessage(null);\n      setModalState(false);\n      callback(true);\n      clearTimeout(timer);\n\n    }, 5000);\n\n\n  }, [data])\n\n  \n\n  const handleClick = e => {\n    setModalMessage(null);\n    setModalState(false);\n    clearTimeout(timer);\n  };\n\n\n  return (\n\n    <section\n      onClick={handleClick}\n      className={`modal ${modalState? \"is-active\":\"is-hidden\"}`}\n      >\n      <div className=\"pa1\">\n       {message}\n      </div>\n    </section>\n\n  )\n}\n\nexport default ModalMessage\n","/Users/think/Github/projects/cxapp/desktop/src/context/AuthContext.js",[],"/Users/think/Github/projects/cxapp/desktop/src/api/Task.js",["184","185","186","187","188","189","190","191","192"],"/Users/think/Github/projects/cxapp/desktop/src/components/Dropdown.js",[],["193","194"],"/Users/think/Github/projects/cxapp/desktop/src/index.js",[],"/Users/think/Github/projects/cxapp/desktop/src/components/ClientList.js",["195","196","197","198","199","200","201"],"import { useRef, useState, useContext, useEffect } from 'react';\nimport { SettingsClient, Footer, FooterModal, Textarea } from './'\n\nimport { AuthContext } from '../context/AuthContext';\nimport { AppContext } from '../context/AppContext';\n\nconst { Menu, MenuItem } = window.remote;\n\nconst ClientList = ({ callback }) => {\n\n  const abortController = new AbortController();\n\n  const token = useContext(AuthContext).token;\n  const app = useContext(AppContext);\n\n  const [clients, setClients] = useState([]);\n  const [activeClient, setActiveClient] = useState(null);\n  const [clientPassword, setClientPassword] = useState(null);\n  const [modalState, setModalState] = useState(false);\n\n  const clientsRef = useRef(clients);\n  clientsRef.current = clients;\n  \n\n  const _createClient = () => {\n    if(!token) return;\n    fetch(`${app.api}/api/client`, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      body: JSON.stringify({\n        name: 'New Client',\n      })\n    })\n    .then((response) => response.json())\n    .then((json) => {\n      setClients(clients.concat(json));\n      // callback(json);\n    })\n    .catch((error) => console.error(error))\n  }\n\n\n  const _updateClientPassword = (id) => {\n    if(!token) return;\n    fetch(`${app.api}/api/client/${id}/password`, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      }\n    })\n    .then((response) => response.json())\n    .then((json) => {\n      setClientPassword(json);\n    })\n    .catch((error) => console.error(error))\n  }\n\n\n  const _updateClient = (value, id) => {\n    if(!token) return;\n    fetch(`${app.api}/api/client/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      body: JSON.stringify({\n        name: value,\n      })\n    })\n    .catch((error) => console.error(error))\n  }\n\n\n  const _deleteClient = (id) => {\n    if(!token) return;\n    fetch(`${app.api}/api/client/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      }\n    })\n    .catch((error) => console.error(error))\n  }\n  \n\n  const editClient = (id) => {\n    setActiveClient(id)\n  }\n\n\n  const generateKey = (id) => {\n    _updateClientPassword(id);\n  }\n\n  \n  const _getClients = () => {\n    if(!token) return;\n    fetch(`${app.api}/api/clients`, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'authorization': token,\n      },\n      signal: abortController.signal\n    })\n    .then((response) => response.json())\n    .then((json) => {\n      setClients(json)\n    })\n    .catch((error) => console.error(error))\n  }\n\n  const deleteClient = (id) => {\n    _deleteClient(id);\n    const filteredClients = clientsRef.current.filter(item => item.id !== parseInt(id))\n    setClients(filteredClients)\n  };\n\n\n  const handleCallback = (data) => {\n    callback(data)\n  };\n\n\n  const handleBlur = (value) => {\n    if(value !== '') {\n      _updateClient(value, activeClient)\n      setActiveClient(null);\n    }\n  };\n\n\n  const handleFocus = (elem) => {\n    setTimeout(function() {\n      elem.firstChild.focus();\n    }, 0);\n  };\n\n\n  useEffect(() => {\n    contextMenu();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[]);\n\n\n  useEffect(() => {\n    if(app.api !== null) {\n      _getClients();\n    }\n\n    return () => {\n      abortController.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [app.api]);\n\n\n\n  const contextMenu = () => {\n    window.addEventListener('contextmenu', (e) => {\n       const menu = new Menu();\n       if (e.target.dataset.client) {\n         menu.append(new MenuItem({\n           label: \"Edit Client\",\n           click: () => {\n             handleFocus(e.target.parentNode)\n             setActiveClient(e.target.dataset.id);\n           }\n         }));\n         menu.append(new MenuItem({\n          type: \"separator\",\n        }));\n         menu.append(new MenuItem({\n           label: \"Generate New Key\",\n           click: () => {\n             generateKey(e.target.dataset.id)\n           }\n         }));\n         menu.append(new MenuItem({\n          type: \"separator\",\n        }));\n         menu.append(new MenuItem({\n          label: \"Delete Client\",\n          click: () => {\n           deleteClient(e.target.dataset.id)\n          }\n        }));\n       }\n       menu.popup({ window: window.remote.getCurrentWindow() })\n     }, false)\n  }\n\n  return (\n\n    <>\n          { clients.map((item, index) => \n\n            <div \n              key={index}\n              className=\"client-list-wrapper\" \n            >\n\n          {(parseInt(activeClient) === item.id)\n\n          ?  <Textarea\n               data={item.name}\n               callback={handleBlur}\n            />\n\n          : <p\n              data-client\n              data-id={item.id}\n              onClick={() => handleCallback(item)}\n            >\n            {item.name}\n            </p>\n\n          }\n\n            </div>\n        )}\n\n            <div className=\"client-list-footer pt2\">\n\n              <button \n                className=\"btn btn--icon\"\n                onClick={_createClient}\n                >\n                <svg viewBox=\"0 0 100 100\" className=\"ic-svg s16\"> \n                  <use xlinkHref=\"/assets/sprite.svg#add\"></use>\n                </svg>\n              </button>\n\n            </div>\n    </>\n\n  )\n}\n\nexport default ClientList\n","/Users/think/Github/projects/cxapp/desktop/src/components/Account.js",["202","203"],"import { useState, useRef } from 'react';\nimport { Logout } from './'\n\nconst Account = ( ) => {\n\nconst username = useRef();\nconst password = useRef();\nconst passwordRepeat = useRef();\n\nconst [errorMessage, setErrorMessage] = useState(null);\nconst [usernameError, setUsernameError] = useState(false);\nconst [passwordShown, setPasswordShown] = useState(false);\nconst [passwordError, setPasswordError] = useState(false);\n\nconst validateUsername = event => {\n  event.preventDefault();\n}\n\nconst validatePassword = event => {\n\n  event.preventDefault();\n  console.log(password.current.value)\n  console.log(passwordRepeat.current.value)\n  if(password.current.value === passwordRepeat.current.value) {\n    // _storePassword()\n  } else {\n    setPasswordError(true);\n    setErrorMessage('Password dont match');\n  }\n}\n\n  return (\n\n    <>\n      <div className=\"account-wrapper\">\n\n        <div className=\"form-group pb3\">\n          <label htmlFor=\"username\">Username</label>\n          \n          <input\n            ref={username}\n            type=\"text\"\n            data-type=\"username\"\n            name=\"username\"\n            max-length=\"40\"\n            placeholder=\"Charlie Chaplin\"\n            defaultValue=\"admin\"\n          />\n        </div>\n\n        <div className=\"form-group pb3\">\n          <label htmlFor=\"password\">Password</label>\n\n          <div className=\"password-input-wrapper pb3\">\n            <input\n              ref={password}\n              type={passwordShown ? \"text\" : \"password\"}\n              data-type=\"password\"\n              name=\"password\"\n              max-length=\"40\"\n              defaultValue=\"1234\"\n              onChange={() => {\n                setUsernameError(false);\n                setErrorMessage(null);\n              }}\n            />\n            <button \n              className=\"btn btn--icon\"\n              onClick={() => {setPasswordShown(!passwordShown)}}\n              >\n              <svg viewBox=\"0 0 100 100\" className=\"ic-svg s16\"> \n                <use xlinkHref=\"/assets/sprite.svg#showhide\"></use>\n              </svg>\n            </button>\n          </div>\n\n          { passwordError &&\n            <div className=\"form-error mb3\">\n                <span className=\"error-message\">{errorMessage}</span>\n            </div>\n          }\n\n            <button\n              className=\"btn btn--secondary\"\n              onClick={validatePassword}\n            >\n              Update\n            </button>\n\n          <div className=\"account-footer\">\n           <Logout />\n          </div>\n\n\n        </div>\n\n        \n       \n       </div>\n\n    </>\n\n  )\n}\n\nexport default Account\n","/Users/think/Github/projects/cxapp/desktop/src/components/TimerList.js",["204","205","206","207","208"],{"ruleId":"209","severity":1,"message":"210","line":22,"column":7,"nodeType":"211","endLine":29,"endColumn":8},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","replacedBy":"215"},{"ruleId":"209","severity":1,"message":"210","line":11,"column":5,"nodeType":"211","endLine":11,"endColumn":40},{"ruleId":"212","replacedBy":"216"},{"ruleId":"214","replacedBy":"217"},{"ruleId":"212","replacedBy":"218"},{"ruleId":"214","replacedBy":"219"},{"ruleId":"212","replacedBy":"220"},{"ruleId":"214","replacedBy":"221"},{"ruleId":null,"fatal":true,"severity":2,"message":"222","line":26,"column":10},{"ruleId":"223","severity":1,"message":"224","line":9,"column":65,"nodeType":"225","messageId":"226","endLine":9,"endColumn":80},{"ruleId":"223","severity":1,"message":"227","line":9,"column":103,"nodeType":"225","messageId":"226","endLine":9,"endColumn":115},{"ruleId":"223","severity":1,"message":"228","line":33,"column":10,"nodeType":"225","messageId":"226","endLine":33,"endColumn":22},{"ruleId":"223","severity":1,"message":"229","line":33,"column":24,"nodeType":"225","messageId":"226","endLine":33,"endColumn":39},{"ruleId":"223","severity":1,"message":"230","line":34,"column":10,"nodeType":"225","messageId":"226","endLine":34,"endColumn":30},{"ruleId":"223","severity":1,"message":"231","line":34,"column":32,"nodeType":"225","messageId":"226","endLine":34,"endColumn":53},{"ruleId":"223","severity":1,"message":"232","line":286,"column":9,"nodeType":"225","messageId":"226","endLine":286,"endColumn":21},{"ruleId":"223","severity":1,"message":"233","line":318,"column":9,"nodeType":"225","messageId":"226","endLine":318,"endColumn":21},{"ruleId":"223","severity":1,"message":"234","line":5,"column":28,"nodeType":"225","messageId":"226","endLine":5,"endColumn":36},{"ruleId":"223","severity":1,"message":"235","line":19,"column":8,"nodeType":"225","messageId":"226","endLine":19,"endColumn":15},{"ruleId":"223","severity":1,"message":"236","line":177,"column":7,"nodeType":"225","messageId":"226","endLine":177,"endColumn":17},{"ruleId":"212","replacedBy":"237"},{"ruleId":"214","replacedBy":"238"},{"ruleId":"212","replacedBy":"239"},{"ruleId":"214","replacedBy":"240"},{"ruleId":"223","severity":1,"message":"241","line":60,"column":9,"nodeType":"225","messageId":"226","endLine":60,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":13,"column":7,"nodeType":"211","endLine":17,"endColumn":8},{"ruleId":"212","replacedBy":"242"},{"ruleId":"214","replacedBy":"243"},{"ruleId":"223","severity":1,"message":"244","line":9,"column":7,"nodeType":"225","messageId":"226","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"245","line":5,"column":9,"nodeType":"225","messageId":"226","endLine":5,"endColumn":13},{"ruleId":"246","severity":1,"message":"247","line":18,"column":13,"nodeType":"248","endLine":25,"endColumn":13},{"ruleId":"249","severity":2,"message":"250","line":9,"column":16,"nodeType":"225","endLine":9,"endColumn":26},{"ruleId":"249","severity":2,"message":"250","line":10,"column":15,"nodeType":"225","endLine":10,"endColumn":25},{"ruleId":"249","severity":2,"message":"251","line":15,"column":27,"nodeType":"225","endLine":15,"endColumn":35},{"ruleId":"249","severity":2,"message":"251","line":16,"column":33,"nodeType":"225","endLine":16,"endColumn":41},{"ruleId":"249","severity":2,"message":"251","line":17,"column":29,"nodeType":"225","endLine":17,"endColumn":37},{"ruleId":"252","severity":2,"message":"253","line":25,"column":32,"nodeType":"225","messageId":"254","endLine":25,"endColumn":36},{"ruleId":"252","severity":2,"message":"255","line":54,"column":1,"nodeType":"225","messageId":"254","endLine":54,"endColumn":10},{"ruleId":"249","severity":2,"message":"256","line":54,"column":1,"nodeType":"225","endLine":54,"endColumn":10},{"ruleId":"252","severity":2,"message":"257","line":58,"column":13,"nodeType":"225","messageId":"254","endLine":58,"endColumn":16},{"ruleId":"212","replacedBy":"258"},{"ruleId":"214","replacedBy":"259"},{"ruleId":"223","severity":1,"message":"260","line":2,"column":10,"nodeType":"225","messageId":"226","endLine":2,"endColumn":24},{"ruleId":"223","severity":1,"message":"261","line":2,"column":26,"nodeType":"225","messageId":"226","endLine":2,"endColumn":32},{"ruleId":"223","severity":1,"message":"262","line":2,"column":34,"nodeType":"225","messageId":"226","endLine":2,"endColumn":45},{"ruleId":"223","severity":1,"message":"263","line":18,"column":10,"nodeType":"225","messageId":"226","endLine":18,"endColumn":24},{"ruleId":"223","severity":1,"message":"264","line":19,"column":10,"nodeType":"225","messageId":"226","endLine":19,"endColumn":20},{"ruleId":"223","severity":1,"message":"265","line":19,"column":22,"nodeType":"225","messageId":"226","endLine":19,"endColumn":35},{"ruleId":"223","severity":1,"message":"236","line":96,"column":9,"nodeType":"225","messageId":"226","endLine":96,"endColumn":19},{"ruleId":"223","severity":1,"message":"266","line":11,"column":8,"nodeType":"225","messageId":"226","endLine":11,"endColumn":21},{"ruleId":"223","severity":1,"message":"267","line":15,"column":7,"nodeType":"225","messageId":"226","endLine":15,"endColumn":23},{"ruleId":"223","severity":1,"message":"260","line":2,"column":10,"nodeType":"225","messageId":"226","endLine":2,"endColumn":24},{"ruleId":"223","severity":1,"message":"261","line":2,"column":26,"nodeType":"225","messageId":"226","endLine":2,"endColumn":32},{"ruleId":"223","severity":1,"message":"262","line":2,"column":34,"nodeType":"225","messageId":"226","endLine":2,"endColumn":45},{"ruleId":"223","severity":1,"message":"268","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":16},{"ruleId":"223","severity":1,"message":"269","line":102,"column":9,"nodeType":"225","messageId":"226","endLine":102,"endColumn":18},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["270"],"no-negated-in-lhs",["271"],["270"],["271"],["270"],["271"],["270"],["271"],"Parsing error: `ClientList` has already been exported. Exported identifiers must be unique.\n\n\u001b[0m \u001b[90m 24 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 | \u001b[39m\u001b[36mexport\u001b[39m { \u001b[36mdefault\u001b[39m as \u001b[33mClientList\u001b[39m } from \u001b[32m'./ClientList'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 | \u001b[39m\u001b[36mexport\u001b[39m { \u001b[36mdefault\u001b[39m as \u001b[33mClientList\u001b[39m } from \u001b[32m'./TimerList'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 | \u001b[39m\u001b[36mexport\u001b[39m { \u001b[36mdefault\u001b[39m as \u001b[33mAccount\u001b[39m } from \u001b[32m'./Account'\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 28 | \u001b[39m\u001b[0m","no-unused-vars","'CardMessageSend' is defined but never used.","Identifier","unusedVar","'ModalMessage' is defined but never used.","'modalMessage' is assigned a value but never used.","'setModalMessage' is assigned a value but never used.","'modalMessageCallback' is assigned a value but never used.","'setModalStateCallback' is assigned a value but never used.","'storeMessage' is assigned a value but never used.","'updateStatus' is assigned a value but never used.","'CardTask' is defined but never used.","'clients' is assigned a value but never used.","'editClient' is assigned a value but never used.",["270"],["271"],["270"],["271"],"'parseTime' is assigned a value but never used.",["270"],["271"],"'token' is assigned a value but never used.","'node' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'timer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"fetchApi\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","React Hook \"useState\" is called in function \"fetchApi\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","no-undef","'task' is not defined.","undef","'useEffect' is not defined.","React Hook \"useEffect\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.","'app' is not defined.",["270"],["271"],"'SettingsClient' is defined but never used.","'Footer' is defined but never used.","'FooterModal' is defined but never used.","'clientPassword' is assigned a value but never used.","'modalState' is assigned a value but never used.","'setModalState' is assigned a value but never used.","'usernameError' is assigned a value but never used.","'validateUsername' is assigned a value but never used.","'format' is defined but never used.","'editTimer' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]